<?xml version="1.0" encoding="UTF-8"?>
<included>
    <!--
    说明：
    1. 文件的命名和加载顺序有关
       logback.xml早于application.yml加载，logback-spring.xml晚于application.yml加载
       如果logback配置需要使用application.yml中的属性，需要命名为logback-spring.xml
    2. logback使用application.yml中的属性
       使用springProperty才可使用application.yml中的值 可以设置默认值

    -->

    <!-- scope=context：该属性在本配置内使用有效，source为在application.properties中定义的信息，defaultValue为默认值 -->
    <springProperty scope="system" name="logPath" source="logging.file.path" defaultValue="app-logs"/>
    <springProperty scope="system" name="logName" source="spring.application.name" defaultValue="zero-log"/>

    <!-- 日志输出格式 -->
    <!--    %white(%d{yyyy-MM-dd HH:mm:ss}) %highlight(%lsn) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{10}) - %cyan(%msg%n)-->
    <!--%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n-->

    <property name="logPattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger-%line - %msg%n"/>

    <!-- 控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%white(%d{yyyy-MM-dd HH:mm:ss.SSS}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger-%line) - %cyan(%msg%n)
            </pattern>
            <charset>utf8</charset>
        </encoder>
    </appender>

    <!-- 输出大于等于配置级别的日志到指定stdout.log文件-->
    <appender name="allAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>utf8</charset>
        </encoder>
        <!-- 日志文件名称 -->
        <file>${logPath}/${logName}/${logName}-stdout.log</file>
        <!-- 每天生成日志文件，文件大小超过20M则新生成一个文件，文件保存最长30天 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/backup/${logName}/${logName}-stdout.log.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!-- 日志文件保存日期最长为30天 -->
            <MaxHistory>30</MaxHistory>
            <!-- 日志文件最大为20MB -->
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 输出info级别日志到指定info.log文件-->
    <appender name="infoAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>utf8</charset>
        </encoder>
        <file>${logPath}/${logName}/${logName}-info.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/backup/${logName}/${logName}-info.log.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <MaxHistory>30</MaxHistory>
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
        <!-- 过滤器，可以过滤掉不符合条件的日志，INFO级别的日志被处理，其它的拒绝 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 输出warn级别日志到指定warn.log文件-->
    <appender name="warnAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>utf8</charset>
        </encoder>
        <file>${logPath}/${logName}/${logName}-warn.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/backup/${logName}/${logName}-warn.log.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <MaxHistory>30</MaxHistory>
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
        <!-- 过滤器，可以过滤掉不符合条件的日志，WARN级别的日志被处理，其它的拒绝 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 输出error级别日志到指定error.log文件-->
    <appender name="errorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>utf8</charset>
        </encoder>
        <file>${logPath}/${logName}/${logName}-error.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/backup/${logName}/${logName}-error.log.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <MaxHistory>30</MaxHistory>
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
        <!-- 过滤器，可以过滤掉不符合条件的日志，ERROR级别的日志被处理，其它的拒绝 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
       name:用来指定受此logger约束的某一个包或者具体的某一个类。
       level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
               如果未设置此属性，那么当前logger将会继承上级的级别。
       addtivity:是否向上级logger传递打印信息。默认是true。-->
    <!-- 输出指定目录的日志到frameworkAppender配置，同时指定日志输出级别为大于等于info，向root传递(additivity默认为true)-->

    <!-- 输出sql日志到指定sql.log文件 -->
    <appender name="sqlAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${logPattern}</pattern>
            <charset>utf8</charset>
        </encoder>
        <file>${logPath}/${logName}/${logName}-sql.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/backup/${logName}/${logName}-sql.log.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <MaxHistory>30</MaxHistory>
            <maxFileSize>20MB</maxFileSize>
        </rollingPolicy>
    </appender>

    <!-- 异步输出，异步的log片段必须在同步段后面，否则不起作用 -->
    <appender name="allAppenderAsync" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>10000</queueSize>
        <appender-ref ref="allAppender"/>
    </appender>

    <appender name="sqlAppenderAsync" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>512</queueSize>
        <appender-ref ref="sqlAppender"/>
    </appender>

    <appender name="infoAppenderAsync" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>10000</queueSize>
        <appender-ref ref="infoAppender"/>
    </appender>
    <appender name="warnAppenderAsync" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>512</queueSize>
        <appender-ref ref="warnAppender"/>
    </appender>
    <appender name="errorAppenderAsync" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>512</queueSize>
        <appender-ref ref="errorAppender"/>
    </appender>

</included>